{"version":3,"file":"static/js/421.19a4da0f.chunk.js","mappings":"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","sources":["services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/sharing/getSharing\";\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  let urlObjWAF =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/\";\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/setPreferences\";\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/getEcosystem\";\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["SearchCA","async","flowDownCA","headers","CADetails","CAAtt","console","log","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","type","onComplete","response","onFailure","error","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","item","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","state","usePlantAssignment","showErrorToast","useToast","dispatch","useDispatch","email","window","widget","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","fetchCsrfToken","userGroupCollab","_objectSpread","data","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","replace","length","grpUrl","grpresponse","filter","members","includes","map","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","id","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","value","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","warn","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","securityContext1","csrfURL","process","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}